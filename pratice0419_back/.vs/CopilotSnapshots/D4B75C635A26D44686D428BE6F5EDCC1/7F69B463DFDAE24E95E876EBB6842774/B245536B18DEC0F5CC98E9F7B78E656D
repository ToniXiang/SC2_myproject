"""
Definition of views.
"""

from datetime import datetime
from django.shortcuts import render
from django.http import HttpRequest
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework import status
from .models import Product,Order
from .serializers import ProductSerializer,OrderSerializer,CreateOrderSerializer,CustomAuthTokenSerializer
from rest_framework.views import APIView
from django.contrib.auth.models import User 
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response
from rest_framework.authentication import TokenAuthentication
from rest_framework.permissions import IsAuthenticated
from django.core.cache import cache
import random
from django.contrib.auth.hashers import make_password

@api_view(['POST'])
@permission_classes([AllowAny])
def register(request):
    """
    註冊 API：存儲用戶的姓名、密碼和電子郵件。
    """
    username = request.data.get('username')
    email = request.data.get('email')
    password = request.data.get('password')
    
    if not username or not email or not password:
        return Response({'message': '需要完整郵件、名稱與密碼'}, status=status.HTTP_400_BAD_REQUEST, content_type='application/json; charset=utf-8')

    if User.objects.filter(email=email).exists():
        return Response({'message': '此郵件已被註冊'}, status=status.HTTP_400_BAD_REQUEST, content_type='application/json; charset=utf-8')

    user = User.objects.create_user(username=username, email=email, password=password)
    return Response({'message': '註冊成功',
    },status=status.HTTP_201_CREATED, content_type='application/json; charset=utf-8')
@permission_classes([AllowAny])
class CustomAuthToken(ObtainAuthToken):
    """
    登入 API：使用電子郵件和密碼進行驗證。
    """
    
    
    def post(self, request):
        serializer = CustomAuthTokenSerializer(data=request.data, context={'request': request})
        if not serializer.is_valid():
            return Response(
                {'message': '電子郵件或密碼輸入錯誤'},
                status=status.HTTP_400_BAD_REQUEST,
                content_type='application/json; charset=utf-8'
            )
        user = serializer.validated_data['user']
        token, created = Token.objects.get_or_create(user=user)
        return Response({
            'message':'登入成功',
            'token': token.key,
            'username': user.username,
        }, status=status.HTTP_200_OK, content_type='application/json; charset=utf-8')

@permission_classes([AllowAny])
class ProductListView(APIView):
    """
    商品 API：獲取商品列表。
    """
    def get(self, request):
        try:
            products = Product.objects.all()
            serializer = ProductSerializer(products, many=True)
            return Response(
                {
                    "message": "商品列表取得成功",
                    "data": serializer.data
                },
                status=status.HTTP_200_OK,
                content_type='application/json; charset=utf-8'

            )
        except Exception as e:
            return Response(
                {
                    "message": "伺服器發生錯誤，請稍後再試",
                },
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
                content_type='application/json; charset=utf-8'
            )
class OrderView(APIView):
    """
    訂單 API：傳出訂單列表、傳入訂單。
    """
    authentication_classes = [TokenAuthentication]
    permission_classes = [IsAuthenticated]
    def get(self, request):
        """
        傳出訂單列表：僅返回當前使用者的訂單。
        """
        try:
            orders = Order.objects.filter(user=request.user)
            serializer = OrderSerializer(orders, many=True)
            #print(serializer.data);
            return Response(serializer.data, status=status.HTTP_200_OK)
        except Exception as e:
            return Response({'error':'伺服器錯誤'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR, content_type='application/json; charset=utf-8')
    def post(self, request):
        """
            傳入訂單：創建屬於當前使用者的訂單
        """
        if not request.data or not any(request.data.values()):
            return Response(
            {
                "message": "訂單建立失敗，沒有任何輸入資料",
            },
            status=status.HTTP_400_BAD_REQUEST,
            content_type='application/json; charset=utf-8'
            )
        serializer = CreateOrderSerializer(data=request.data, context={'request': request})
        try:
            if serializer.is_valid():
                order = serializer.save(user=request.user)
                return Response(
                    {
                        "message": "訂單建立成功",
                        "data": OrderSerializer(order).data
                    },
                    status=status.HTTP_201_CREATED,
                    content_type='application/json; charset=utf-8'
                )
            return Response(
                {
                    "message": "訂單建立失敗，請確認輸入資料",
                },
                status=status.HTTP_400_BAD_REQUEST,
                content_type='application/json; charset=utf-8'
            )
        except Exception as e:
            return Response(
            {
                "message": "伺服器發生錯誤，請稍後再試",
            },
            status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            content_type='application/json; charset=utf-8',
        )

class UserView(APIView):
    """
        傳出用戶名稱與郵件
    """
    def get(self,request):
        try:
            user = request.user
            if user.is_authenticated:
                data = {
                    "username": user.username,
                    "email": user.email
                }
                return Response(data, status=status.HTTP_200_OK, content_type='application/json; charset=utf-8')
            else:
                return Response({'message': '使用者未登入'}, status=status.HTTP_401_UNAUTHORIZED, content_type='application/json; charset=utf-8')
        except Exception as e:
            return Response({'message':'伺服器錯誤'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR, content_type='application/json; charset=utf-8')
class SendVerificationCodeView(APIView):
    """
    發送重設密碼驗證碼到用戶 email
    """
    def post(self, request):
        email = request.data.get('email')
        if not email:
            return Response({'message': '缺少 email'}, status=status.HTTP_400_BAD_REQUEST, content_type='application/json; charset=utf-8')

        # 生成 6 位數驗證碼
        code = str(random.randint(100000, 999999))
        cache.set(f'password_reset_{email}', code, timeout=300)  # 5 分鐘有效

        # TODO: 用郵件發送驗證碼
        print(f'驗證碼發送到 {email}: {code}')

        return Response({'message': '驗證碼已發送'}, status=status.HTTP_200_OK, content_type='application/json; charset=utf-8')
class ResetPasswordView(APIView):
    """
    使用驗證碼重設密碼
    """
    def post(self, request):
        email = request.data.get('email')
        code = request.data.get('code')
        new_password = request.data.get('password')

        if not all([email, code, new_password]):
            return Response({'message': '缺少必要參數'}, status=status.HTTP_400_BAD_REQUEST, content_type='application/json; charset=utf-8')

        cached_code = cache.get(f'password_reset_{email}')
        if cached_code != code:
            return Response({'message': '驗證碼錯誤或已過期'}, status=status.HTTP_400_BAD_REQUEST, content_type='application/json; charset=utf-8')

        try:
            user = User.objects.get(email=email)
            user.password = make_password(new_password)
            user.save()
            cache.delete(f'password_reset_{email}')  # 刪除驗證碼
            return Response({'message': '密碼重設成功'}, status=status.HTTP_200_OK, content_type='application/json; charset=utf-8')
        except User.DoesNotExist:
            return Response({'message': '用戶不存在'}, status=status.HTTP_404_NOT_FOUND, content_type='application/json; charset=utf-8')
class CancelOrderView(APIView):
       """
       訂單 id 移除定單
       """
       def post(self, request, order_id):
            try:
                order = Order.objects.get(id=order_id)
                order.delete()
                return Response(
                    {'message': '訂單移除成功'},
                    status=status.HTTP_200_OK,
                    content_type='application/json; charset=utf-8'
                )
            except Order.DoesNotExist:
                return Response(
                    {'message': '訂單不存在'},
                    status=status.HTTP_404_NOT_FOUND,
                    content_type='application/json; charset=utf-8'
                )
def home(request):
    """Renders the home page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/index.html',
        {
            'title':'Home Page',
            'year':datetime.now().year,
        }
    )

def contact(request):
    """Renders the contact page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/contact.html',
        {
            'title':'Contact',
            'message':'Your contact page.',
            'year':datetime.now().year,
        }
    )

def about(request):
    """Renders the about page."""
    assert isinstance(request, HttpRequest)
    return render(
        request,
        'app/about.html',
        {
            'title':'About',
            'message':'Your application description page.',
            'year':datetime.now().year,
        }
    )
